#!/usr/bin/env python

from __future__ import print_function
import argparse
from lxml import etree
from fungidb_tools.simple_gdata import SimpleGData
from fungidb_tools import simple_eutils as eutils
from fungidb_tools import datasets


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('-i', '--input',
                        help='input file of dumped xml from NCBI')
    parser.add_argument('-d', '--dump',
                        help='file to output NCBI contents')
    parser.add_argument('-e', '--email',
                        help='gmail login')
    parser.add_argument('-p', '--pword',
                        help='gmail password')
    parser.add_argument('-c', '--commit',
                        action='store_true',
                        help='write to spreadsheet')
    return parser.parse_args()


def main():
    args = parse_arguments()

    sheet = SimpleGData.prompt_creds(args.email, args.pword)
    sheet.select_document(datasets.defaults['gdoc'])
    sheet.select_worksheet(datasets.defaults['gsheet'])
    feed = sheet.get_list_feed()
    targets = []
    taxids = []
    for row in feed.entry:
        taxid = row.custom['speciesncbitaxid'].text
        if taxid is not None:
            targets.append(row)
            taxids.append(taxid)

    if args.input:
        taxa = etree.parse(args.input)
    else:
        taxa = eutils.etree_fetch('taxonomy', id=taxids, out=args.dump)

    for row, taxid in zip(targets, taxids):
        t = taxa.find('Taxon[TaxId="%s"]' % taxid)
        if t is None:
            raise Exception(taxid)
        fam_taxon = None
        for rank in ('family', 'suborder', 'order', 'genus'):
            fam_taxon = t.find('LineageEx/Taxon[Rank="%s"]' % rank)
            if fam_taxon is not None:
                break
        else:
            raise Exception(taxid)
        fam_taxid = fam_taxon.find('TaxId').text
        fam_name = fam_taxon.find('ScientificName').text
        print(fam_taxid, fam_name)
        row.custom['familyncbitaxid'].text = fam_taxid
        row.custom['family'].text = fam_name
        if args.commit:
            sheet.update_row(row)


if __name__ == "__main__":
    main()

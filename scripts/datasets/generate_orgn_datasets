#!/usr/bin/env python
from __future__ import print_function
import argparse
import os
import json
from warnings import warn
from lxml import etree
from fungidb_tools import naming
from fungidb_tools import datasets
from fungidb_tools.xml import indent

DATASETS_DIR = os.path.expanduser("~/GUS/trunk/project_home/FungiDBDatasets/Datasets/lib/xml/datasets/FungiDB")
MD_DIR = "/eupath/data/EuPathDB/manualDelivery/FungiDB"
DEFAULT_JSON = os.path.expanduser("~/workspace/FungiDB.json")
DEFAULT_XML = os.path.expanduser("~/workspace/FungiDB.xml")


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('--jsonfile',
                        type=argparse.FileType('r'),
                        default=open(datasets.defaults['json'], 'r'),
                        help='jsonized spreadsheet')
    return parser.parse_args()


def make_species_xmls(organisms):
    """Generate xml files for each species.

    Args:
        organisms: pulled in as a JSON object from the FungiDB spreadsheet
    """
    organisms = [o for o in organisms if datasets.get_row(o, 'isloaded') in ('Yes', 'Reload')]
    species_reps, family_reps = datasets.extract_reps(organisms)

    for o in organisms:
        abbrev = datasets.get_row(o, 'abbrev')
        fullname = datasets.get_row(o, 'fullname')
        strain_abbrev = naming.abbrev_strain(datasets.get_row(o, 'strain'))
        ref_strain = species_reps[naming.short_species(fullname)]
        family_rep = family_reps[datasets.get_row(o, 'subclade')][0]
        strain_taxid = datasets.get_row(o, 'taxid')
        species_taxid = datasets.get_row(o, 'speciestaxid')
        version = datasets.get_row(o, 'version')
        soterm = datasets.get_row(o, 'soterm')
        source = datasets.get_row(o, 'source')
        idprefix = datasets.get_row(o, 'idprefix')
        if idprefix is None:
            idprefix = ""

        try:
            xmlpath = os.path.join(DATASETS_DIR, abbrev + '.xml')
            xml = etree.parse(xmlpath)
            # rep = xml.xpath('constant[@name="familyRepOrganismAbbrev"]')
        except OSError:
            warn("Failed to load xml file:", xmlpath)
            break

        ds = etree.Element("datasets")
        datasets.make_constant(ds, "organismAbbrev", abbrev)
        datasets.make_constant(ds, "strainAbbrev", strain_abbrev)
        datasets.make_constant(ds, "referenceStrainOrganismAbbrev", ref_strain)
        datasets.make_constant(ds, "familyRepOrganismAbbrev", family_rep)
        datasets.make_constant(ds, "projectName", "FungiDB")
        datasets.make_constant(ds, "ncbiTaxonId", strain_taxid)
        datasets.make_constant(ds, "speciesNcbiTaxonId", species_taxid)
        datasets.make_constant(ds, "genomeVersion", version)
        datasets.make_constant(ds, "soTerm", soterm)
        datasets.make_constant(ds, "source", source)
        datasets.make_constant(ds, "idPrefix", idprefix)

        d = datasets.make_dataset(ds, "validateOrganismInfo")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "strainAbbrev", "$$strainAbbrev$$")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")
        datasets.make_prop(d, "genomeVersion", "$$genomeVersion$$")

        d = datasets.make_dataset(ds, "transcriptsFromReferenceStrain")
        datasets.make_prop(d, "referenceStrainOrganismAbbrev", "$$referenceStrainOrganismAbbrev$$")

        d = datasets.make_dataset(ds, "epitopesFromReferenceStrain")
        datasets.make_prop(d, "referenceStrainOrganismAbbrev", "$$referenceStrainOrganismAbbrev$$")

        d = datasets.make_dataset(ds, "isolatesFromFamilyRepresentative")
        datasets.make_prop(d, "name", "genbank")
        datasets.make_prop(d, "familyRepOrganismAbbrev", "$$familyRepOrganismAbbrev$$")

        if datasets.get_row(o, 'isrefstrain') == 'Yes':
            d = datasets.make_dataset(ds, "referenceStrain-dbEST")
            datasets.make_prop(d, "projectName", "$$projectName$$")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")

            d = datasets.make_dataset(ds, "referenceStrain-epitope_sequences_IEDB")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")
            datasets.make_prop(d, "version", "2.4")

            d = datasets.make_dataset(ds, "referenceStrain-isolatesGenbank")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")

        indent(ds)
        yield ds


def main():
    args = parse_arguments()
    with args.jsonfile as jsonfile:
        organisms = json.load(jsonfile)
    make_species_xmls(organisms)


if __name__ == "__main__":
    main()

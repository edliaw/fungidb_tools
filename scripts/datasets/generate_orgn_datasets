#!/usr/bin/env python
from __future__ import print_function
import argparse
import os
import json
from warnings import warn
from lxml import etree
from fungidb_tools import naming
from fungidb_tools import datasets
from fungidb_tools.xml import indent

DATASETS_DIR = os.path.expanduser("~/GUS/current/project_home/FungiDBDatasets/Datasets/lib/xml/datasets/FungiDB")
MD_DIR = "/eupath/data/EuPathDB/manualDelivery/FungiDB"
DEFAULT_JSON = os.path.expanduser("~/workspace/FungiDB.json")


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('outdir',
                        nargs='?', default=datasets.defaults['datasets'],
                        help='output directory')
    parser.add_argument('--jsonfile',
                        type=argparse.FileType('r'),
                        default=open(datasets.defaults['json'], 'r'),
                        help='jsonized spreadsheet')
    return parser.parse_args()


def make_species_xmls(organisms, outdir):
    """Generate xml files for each species.

    Args:
        organisms: pulled in as a JSON object from the FungiDB spreadsheet
    """
    organisms = [o for o in organisms if datasets.ds_to_bool(datasets.get_row(o, 'isloaded'))]
    species_reps, family_reps = datasets.extract_reps(organisms)

    for o in organisms:
        abbrev = datasets.get_row(o, 'abbrev')
        fullname = datasets.get_row(o, 'fullname')
        strain_abbrev = naming.abbrev_strain(datasets.get_row(o, 'strain'))
        ref_strain = species_reps[naming.short_species(fullname)]
        family_rep = family_reps[datasets.get_row(o, 'family')][0]
        strain_taxid = datasets.get_row(o, 'taxid')
        species_taxid = datasets.get_row(o, 'speciestaxid')
        family_taxid = datasets.get_row(o, 'familytaxid') or ""
        version = datasets.get_row(o, 'version')
        soterm = datasets.get_row(o, 'soterm')
        source = datasets.get_row(o, 'source')
        idprefix = datasets.get_row(o, 'idprefix') or ""
        file_format = datasets.get_row(o, 'format')
        mito = datasets.ds_to_bool(datasets.get_row(o, 'mito'))
        products = datasets.ds_to_bool(datasets.get_row(o, 'products'))
        is_ref_strain = datasets.ds_to_bool(datasets.get_row(o, 'isrefstrain'))
        is_fam_rep = datasets.ds_to_bool(datasets.get_row(o, 'isfamrep'))

        try:
            xmlpath = os.path.join(outdir, abbrev + '.xml')
            xml = etree.parse(xmlpath)
            # rep = xml.xpath('constant[@name="familyRepOrganismAbbrev"]')
        except IOError:
            warn("Failed to load xml file: %s" % xmlpath)
            xml = etree.Element("datasets")

        ds = etree.Element("datasets")
        datasets.make_constant(ds, "organismAbbrev", abbrev)
        datasets.make_constant(ds, "strainAbbrev", strain_abbrev)
        datasets.make_constant(ds, "referenceStrainOrganismAbbrev", ref_strain)
        datasets.make_constant(ds, "familyRepOrganismAbbrev", family_rep)
        datasets.make_constant(ds, "projectName", "FungiDB")
        datasets.make_constant(ds, "ncbiTaxonId", strain_taxid)
        datasets.make_constant(ds, "speciesNcbiTaxonId", species_taxid)
        datasets.make_constant(ds, "familyNcbiTaxonIds", family_taxid)
        datasets.make_constant(ds, "genomeVersion", version)
        datasets.make_constant(ds, "soTerm", soterm)
        datasets.make_constant(ds, "source", source)
        datasets.make_constant(ds, "idPrefix", idprefix)

        d = datasets.make_dataset(ds, "validateOrganismInfo")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "strainAbbrev", "$$strainAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")
        datasets.make_prop(d, "genomeVersion", "$$genomeVersion$$")

        # Genome
        genome_dataset(ds, file_format, mito)

        # Function
        if products:
            d = datasets.make_dataset(ds, "productNames")
            datasets.make_prop(d, "projectName", "$$projectName$$")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "version", "$$genomeVersion$$")
            datasets.make_prop(d, "name", "$$source$$")

        # We'll assume that the current file is correct for all of these and just append them.
        for cls in ('geneName', 'aliases', 'EnzymeCommissionAssociations', 'GeneOntologyAssociations', 'yeastTwoHybrid', 'microarrayPlatform', 'microarrayExpressionExperiment', 'microarrayPlatformWithProviderMapping', 'rnaSeqExperiment', 'SNPs_HTS_Experiment'):
            for c in xml.iterfind('dataset[@class="{}"]'.format(cls)):
                ds.append(c)

        # Cross db references
        d = datasets.make_dataset(ds, "dbxref_gene2Entrez")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "genomeVersion", "$$genomeVersion$$")
        datasets.make_prop(d, "version", "2011-11-29")

        d = datasets.make_dataset(ds, "dbxref_gene2Uniprot")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "genomeVersion", "$$genomeVersion$$")
        datasets.make_prop(d, "version", "2011-11-29")

        d = datasets.make_dataset(ds, "dbxref_gene2PubmedFromNcbi")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "genomeVersion", "$$genomeVersion$$")
        datasets.make_prop(d, "version", "2011-12-17")

        # Custom cross-reference links
        for c in xml.iterfind('dataset[@class="dbxref_unity"]'):
            ds.append(c)

        # From reference strain
        d = datasets.make_dataset(ds, "transcriptsFromReferenceStrain")
        datasets.make_prop(d, "referenceStrainOrganismAbbrev", "$$referenceStrainOrganismAbbrev$$")

        d = datasets.make_dataset(ds, "epitopesFromReferenceStrain")
        datasets.make_prop(d, "referenceStrainOrganismAbbrev", "$$referenceStrainOrganismAbbrev$$")

        # From family representative
        d = datasets.make_dataset(ds, "isolatesFromFamilyRepresentative")
        datasets.make_prop(d, "name", "genbank")
        datasets.make_prop(d, "familyRepOrganismAbbrev", "$$familyRepOrganismAbbrev$$")

        if is_ref_strain:
            # Reference strain data
            d = xml.find('dataset[@class="referenceStrain-ESTsFromFasta"]')
            if d is not None:
                ds.append(d)
            else:
                d = datasets.make_dataset(ds, "referenceStrain-dbEST")
                datasets.make_prop(d, "projectName", "$$projectName$$")
                datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
                datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")

            d = datasets.make_dataset(ds, "referenceStrain-epitope_sequences_IEDB")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "speciesNcbiTaxonId", "$$speciesNcbiTaxonId$$")
            datasets.make_prop(d, "version", "2.4")

        if is_fam_rep:
            d = datasets.make_dataset(ds, "familyRepresentative-isolatesGenbank")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "ncbiTaxonId", "$$familyNcbiTaxonIds$$")

        attribs = [d.attrib['class'] for d in ds.findall('dataset')]
        for c in xml.iterfind('dataset'):
            if c.attrib['class'] not in attribs:
                warn("{}: {}".format(abbrev, c.attrib['class']))

        indent(ds)
        yield ds, abbrev


def genome_dataset(ds, file_format, mito=False):
    if file_format == 'Genbank':
        # Genbank-formatted genome
        d = datasets.make_dataset(ds, "genbank_primary_genome")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "version", "$$genomeVersion$$")
        datasets.make_prop(d, "name", "$$source$$")
        datasets.make_prop(d, "soTerm", "$$soTerm$$")
        datasets.make_prop(d, "mapFile", "FungiDB/fungiGenbank2gus.xml")
        if mito:
            d = datasets.make_dataset(ds, "genbank_organelle_genome")
            datasets.make_prop(d, "projectName", "$$projectName$$")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
            datasets.make_prop(d, "version", "$$genomeVersion$$")
            datasets.make_prop(d, "name", "$$source$$")
            datasets.make_prop(d, "soTerm", "mitochondrial_chromosome")
            datasets.make_prop(d, "mapFile", "FungiDB/fungiGenbank2gus.xml")
            datasets.make_prop(d, "organelle", "mitochondrion")

    else:
        # FASTA/GFF-formatted genome
        d = datasets.make_dataset(ds, "fasta_primary_genome_sequence")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "version", "$$genomeVersion$$")
        datasets.make_prop(d, "name", "$$source$$")
        datasets.make_prop(d, "soTerm", "$$soTerm$$")
        datasets.make_prop(d, "table", "DoTS::ExternalNASequence")
        datasets.make_prop(d, "sourceIdRegex", "^>(\S+)")
        # Genome features
        d = datasets.make_dataset(ds, "NoPreprocess_primary_genome_features")
        datasets.make_prop(d, "projectName", "$$projectName$$")
        datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
        datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
        datasets.make_prop(d, "version", "$$genomeVersion$$")
        datasets.make_prop(d, "source", "$$source$$")
        datasets.make_prop(d, "soTerm", "$$soTerm$$")
        datasets.make_prop(d, "mapFile", "FungiDB/genericGFF2Gus.xml")
        if mito:
            d = datasets.make_dataset(ds, "fasta_organelle_genome")
            datasets.make_prop(d, "projectName", "$$projectName$$")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
            datasets.make_prop(d, "version", "$$genomeVersion$$")
            datasets.make_prop(d, "name", "$$source$$")
            datasets.make_prop(d, "soTerm", "mitochondrial_chromosome")
            datasets.make_prop(d, "table", "DoTS::ExternalNASequence")
            datasets.make_prop(d, "sourceIdRegex", "^>(\S+)")
            datasets.make_prop(d, "organelle", "mitochondrion")

            d = datasets.make_dataset(ds, "NoPreprocess_organelle_genome_features")
            datasets.make_prop(d, "projectName", "$$projectName$$")
            datasets.make_prop(d, "organismAbbrev", "$$organismAbbrev$$")
            datasets.make_prop(d, "ncbiTaxonId", "$$ncbiTaxonId$$")
            datasets.make_prop(d, "version", "$$genomeVersion$$")
            datasets.make_prop(d, "name", "$$source$$")
            datasets.make_prop(d, "soTerm", "mitochondrial_chromosome")
            datasets.make_prop(d, "mapFile", "FungiDB/genericGFF2Gus.xml")


def main():
    args = parse_arguments()
    with args.jsonfile as jsonfile:
        organisms = json.load(jsonfile)
    for ds, abbrev in make_species_xmls(organisms, args.outdir):
        with open(os.path.join(args.outdir, abbrev + '.xml'), 'w') as outfile:
            print(etree.tostring(ds), file=outfile)


if __name__ == "__main__":
    main()

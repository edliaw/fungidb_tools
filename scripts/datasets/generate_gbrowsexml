#!/usr/bin/env python3
"""Print gbrowse tracks for each organism.

2014-03-28
Edward Liaw
"""
import sys
import argparse
import json
from lxml import etree
from collections import OrderedDict
from fungidb_tools import datasets
from fungidb_tools import elementlib


def parse_arguments():
    """Handle command-line arguments.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    parser.add_argument('--jsonfile', '-j',
                        default=datasets.DEFAULT.JSON,
                        help='jsonized spreadsheet')
    return parser.parse_args()


def format_names(tracks):
    for short_abbrev, o in tracks.items():
        for long_abbrev, taxname, subclade, family in o:
            if len(o) > 1:
                yield long_abbrev, taxname, subclade, family
            else:
                yield short_abbrev, taxname, subclade, family


def format_gbrowse(abbrev, taxname):
    contig = ':"{0} contig" "{1}" contig ={0}_span ;'.format(abbrev, taxname)
    genes =':"{0} genes" "{1}" contig ={0}_gene ;'.format(abbrev, taxname)
    return '\n'.join((contig, genes))


def main():
    args = parse_arguments()

    with open(args.jsonfile) as infile:
        organisms = json.load(infile, object_pairs_hook=OrderedDict)
    organisms = [o for o in organisms
                 if datasets.bool_from_sheet(o[datasets.COL.ISLOADED])]

    tracks = OrderedDict()

    for o in organisms:
        long_abbrev = o[datasets.COL.ABBREV].replace('-', '')
        short_abbrev = long_abbrev[:4]
        taxname = o[datasets.COL.TAXNAME]
        subclade = o[datasets.COL.SUBCLADE]
        family = o[datasets.COL.FAMILY]
        tracks.setdefault(short_abbrev, []).append((long_abbrev, taxname, subclade, family))

    tracks = list(format_names(tracks))
    _clades = {}

    for abbrev, taxname, subclade, family in tracks:
        _clades.setdefault(subclade, []).append((abbrev, taxname, family))


    groups = {}

    for subclade, o in _clades.items():
        # Shrink large taxonomic groups
        for abbrev, taxname, family in o:
            if len(o) > 12:
                groups.setdefault(family, []).append((abbrev, taxname))
            else:
                groups.setdefault(subclade, []).append((abbrev, taxname))

    parent = etree.Element("gbrowseImageUrls")
    for group, o in groups.items():
        subtrack = etree.SubElement(parent, "subtrackSet", project="FungiDB",
                                    name=group, suffixes="_span;_gene")
        for abbrev, _ in o:
            track = etree.SubElement(subtrack, "track").text=abbrev

    for group, o in groups.items():
        url = etree.SubElement(parent, "url",
                               **{"project": "FungiDB", "type": "dna"})
        for abbrev, taxname in o:
            etree.SubElement(url, "org", organism=taxname, abbrev=abbrev)
        etree.SubElement(url, "track", name="Gene")
        track = etree.SubElement(url, "track",
                                 name="Synteny", abbrevFirst="true")
        etree.SubElement(track, "subtrack", set=group)
        etree.SubElement(url, "track", name="ProtAlign")
        etree.SubElement(url, "track", name="EST")
        etree.SubElement(url, "track", name="TandemRepeat")
    elementlib.indent(parent)

    with args.outfile as outfile:
        print(etree.tostring(parent, encoding='unicode'), file=outfile)


if __name__ == '__main__':
    exit = main()
    if exit:
        sys.exit(exit)

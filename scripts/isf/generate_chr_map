#!/usr/bin/env python2.7
"""Generates a chromosome map for a fasta file.

2012/09/14
Edward Liaw
"""
from __future__ import print_function
import sys
import argparse
from fungidb_tools.isf.roman import roman_to_int
import re

RE_DEFAULT = (r'(?:Chr|SC)(?:(?P<number>\d+)|(?P<roman>[XIV]+)|(?P<letter>\S+))$',)


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line."""
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    parser.add_argument('--regex',
                        nargs='*', default=RE_DEFAULT,
                        help='regular expression for the fasta header')
    return parser.parse_args()


def parse_headers(infile):
    """Get fasta headers.

    Args:
        infile: A filestream to read from.
    """
    for line in infile:
        if line.startswith('>'):
            yield line.rstrip().lstrip('>')


def main():
    args = parse_arguments()

    regex = [re.compile(rx) for rx in args.regex]

    # Handle I/O.
    with args.infile as infile, args.outfile as outfile:
        for i, header in enumerate(parse_headers(infile)):
            for rx in regex:
                match = rx.search(header)
                if match is not None:
                    match = match.groupdict()
                    number = match.get('number')
                    roman = match.get('roman')
                    letter = match.get('letter')
                    if number is not None:
                        contig = int(match['number'])
                    elif roman is not None:
                        contig = roman_to_int(match['roman'])
                    elif letter is not None:
                        contig = match['letter']
                    else:
                        raise Exception("Regex {} doesn't contain a number, letter, or roman numeral field.".format(rx.pattern))
                    break
            else:
                raise Exception("Not an expected header format: {}\n{}".format(header, args.regex))

            output = (str(col) for col in (header, contig, i + 1))
            print('\t'.join(output), file=outfile)


if __name__ == "__main__":
    main()

#!/usr/bin/env python2.7

from __future__ import print_function
import argparse
import sys
from fungidb_tools.gff import GFF3Parser as gp


def parse_arguments():
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    return parser.parse_args()


def main():
    args = parse_arguments()
    parser = gp.GFF3Parser()

    i = 1

    with args.infile as infile, args.outfile as outfile:
        for feat in parser.parse_file(infile):
            if not isinstance(feat, gp.GFF3Feature):
                outfile.write(str(feat) + '\n')
                continue
            for child in list(feat.children):
                child.id = "cds{:06d}".format(i)
                exon = gp.GFF3Feature(child.seqid, child.source, "exon",
                                      "exon{:06d}".format(i), child.parents,
                                      child.regions, child.children)
                i += 1
                feat.children.add(exon)
            geneid = feat.id.split(':', 1)[1]
            gene = gp.GFF3Feature(feat.seqid, feat.source, "gene", geneid, None,
                                  feat.regions, None)
            gene.children.add(feat)
            feat.parents.add(geneid)
            outfile.write(gene.format() + '\n')


if __name__ == "__main__":
    main()

#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""Reformat gff file for ISF.
Modifies the first two columns.

2012/12/03
Edward Liaw
"""
from __future__ import print_function
import argparse
import sys
from warnings import warn
from fungidb_tools import isf
from fungidb_tools.isf import parse_gff


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    parser.add_argument('--provider',
                        help='provider name')
    parser.add_argument('--prefix',
                        help='unique feature prefix for organism')
    parser.add_argument('--nostart',
                        action='store_true',
                        help='remove start and stop codons')
    isf.add_rename_args(parser)
    parse_gff.add_gff_args(parser)
    return parser.parse_args()


def format_feature(feature, snoRNA, args):
    # Modify the provider
    if args.provider:
        feature.source = args.provider

    # Tag snoRNAs with prefix to make them unique
    if args.prefix:
        if feature.soterm == 'snoRNA':
            snoRNA.append(feature.attr['ID'])
            feature.attr['ID'] = '_'.join((args.prefix, feature.attr['ID']))
        elif feature.soterm in ('noncoding_exon', 'intron') and feature.attr.get('Parent') in snoRNA:
            feature.attr['Parent'] = '_'.join((args.prefix, feature.attr['Parent']))

    try:
        # Remove _mRNA from IDs
        feature.attr['ID'] = feature.attr['ID'].replace('_mRNA', '-T')
    except KeyError:
        pass

    try:
        # Remove _mRNA from parent IDs
        feature.attr['Parent'] = feature.attr['Parent'].replace('_mRNA', '-T')
        # Remove duplicate parents
        feature.attr['Parent'] = feature.attr['Parent'].split(',')[0]
    except KeyError:
        pass


def main():
    args = parse_arguments()
    renamer = isf.ContigRenamer.from_args(args)
    parser = parse_gff.GFFParser.from_args(args)

    snoRNA = []

    with args.infile as infile, args.outfile as outfile:
        for feat in parser.parse_features(infile, outfile):
            if args.nostart and feat.soterm in ('start_codon', 'stop_codon'):
                continue

            try:
                feat.seqid = renamer.rename(feat.seqid)
                if feat.soterm.lower() in ('chromosome', 'contig', 'supercontig'):
                    feat.attr['ID'] = feat.seqid
            except isf.NoMatchException:
                warn("SKIPPED: {} doesn't match any provided regex".format(feat.seqid))
                continue

            # Fix other feature information
            format_feature(feat, snoRNA, args)

            # Print to file
            print(parser.join_feature(feat), file=outfile)


if __name__ == "__main__":
    main()

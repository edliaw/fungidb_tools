#!/usr/bin/env python2.7
"""Reformat gff file for ISF.
Modifies the first two columns.

2012/12/03
Edward Liaw
"""
from __future__ import print_function, unicode_literals
import argparse
import sys
import json
from warnings import warn
from fungidb_tools import isf
from fungidb_tools.isf import parse_gff


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    parser.add_argument('--provider',
                        help='provider name')
    parser.add_argument('--nostart',
                        action='store_true',
                        help='remove start and stop codons')
    parser.add_argument('-p', '--prefix',
                        type=json.loads, metavar="DICT", default={},
                        help='prefix specified soterms')

    rename = parser.add_argument_group('renaming', 'Chromosome renaming')
    isf.add_rename_args(rename)

    gff = parser.add_argument_group('gff', 'GFF parser options')
    parse_gff.add_gff_args(gff)

    return parser.parse_args()


def format_feature(feature, modified, args):
    old_id = feature.attr.get('ID')
    new_id = old_id

    if new_id is not None:
        # Prefix target SO terms
        if feature.soterm in args.prefix:
            new_id = args.prefix[feature.soterm] + new_id

        # Use a T suffix instead of _mRNA
        new_id = new_id.replace('_mRNA', '-T')

    # Modify the provider
    if args.provider:
        feature.source = args.provider

    if feature.attr.get('Parent') in modified:
        feature.attr['Parent'] = modified[feature.attr['Parent']]

    if old_id != new_id:
        assert old_id not in modified, "Multiple modifications made to %s" % old_id
        modified[old_id] = new_id


def main():
    args = parse_arguments()
    renamer = isf.ContigRenamer.from_args(args)
    parser = parse_gff.GFFParser.from_args(args)

    so_contigs = frozenset(('chromosome', 'contig', 'supercontig'))
    so_ends = frozenset(('start_codon', 'stop_codon'))
    modified = {}

    with args.infile as infile, args.outfile as outfile:
        for feat in parser.parse(infile, outfile):
            if args.nostart and feat.soterm in so_ends:
                continue

            try:
                feat.seqid = renamer.rename(feat.seqid)
                if feat.soterm.lower() in so_contigs:
                    feat.attr['ID'] = feat.seqid
            except isf.NoMatchException:
                warn("SKIPPED: {} doesn't match any provided regex".format(feat.seqid))
                continue

            # Fix other feature information
            format_feature(feat, modified, args)

            # Print to file
            for f in parser.join(feat):
                print(f, file=outfile)


if __name__ == "__main__":
    main()

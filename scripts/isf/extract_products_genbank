#!/usr/bin/env python
"""Extracts product names from genbank files.

2012/09/10
Edward Liaw
"""
from __future__ import unicode_literals
import sys
import argparse
from warnings import warn
from Bio import SeqIO


def extract_products(infile, qualifiers):
    """Extract product names.

    Args:
        infile: A filestream to read from.
    """
    for record in SeqIO.parse(infile, 'genbank'):
        for feature in record.features:
            # Extract information from features.
            if feature.type.endswith('RNA'):
                try:
                    locus = feature.qualifiers['locus_tag']
                except:
                    continue
                products = set()
                for q in qualifiers:
                    try:
                        f = feature.qualifiers[q]
                    except KeyError:
                        continue
                    products |= set(qual for qual in f
                                    if qual not in locus)
                if not products:
                    warn("%s missing product" % locus)
                    continue
                if len(locus) > 1:
                    warn("Locus has more than one element {}".format(locus))
                elif len(products) > 1:
                    warn("Product has more than one element {}".format(products))
                yield ','.join(locus), ','.join(products)


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line."""
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    parser.add_argument('-q', '--qualifiers',
                        nargs='*', default=['product'],
                        help='feature qualifiers to extract')
    return parser.parse_args()


def main():
    args = parse_arguments()

    # Handle I/O.
    with args.infile as infile, args.outfile as outfile:
        for locus, product in extract_products(infile, args.qualifiers):
            outfile.write('\t'.join((locus, product)) + '\n')


if __name__ == "__main__":
    main()

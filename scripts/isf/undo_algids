#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""Get the most recent workflow operation's algid and update status.

2013-07-23
Edward Liaw
"""
from __future__ import print_function
import argparse
import shutil
import os
from warnings import warn
from mmap import mmap


def parse_arguments():
    """Handle command-line arguments.

    Returns:
        args: Arguments passed in from the command-line."""
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('algfile',
                        help='algid filename')
    parser.add_argument('-m', '--mark',
                        type=int, metavar="ALGID",
                        help="mark ALGID as undone")
    parser.add_argument('-a', '--all',
                        action='store_true',
                        help="retrieve all committed algids, beginning with the most recent")
    return parser.parse_args()


def reverse_file(infile):
    m = mmap(infile.fileno(), 0)
    nl = m.size() - 1
    prev_nl = m.size()
    while nl > -1:
        nl = m.rfind('\n', 0, nl)
        yield m[nl + 1:prev_nl]
        prev_nl = nl + 1


def read_algfile(algfile):
    for line in algfile:
        algid, plugin, undo = line.rstrip('\n').split('\t')
        yield algid, plugin, undo


def write_algfile(algid, plugin, undo):
    return '\t'.join((algid, plugin, undo))


def mark(args):
    backup = args.algfile + '~'
    dup = args.algfile + '#'
    shutil.copy2(args.algfile, backup)
    with open(args.algfile, 'r') as algfile, open(dup, 'w') as outfile:
        for algid, plugin, undo in read_algfile(algfile):
            if int(algid) == args.mark:
                undo = 'u'
            print(write_algfile(algid, plugin, undo), file=outfile)
    shutil.move(dup, args.algfile)
    os.remove(backup)


def print_algs(args):
    try:
        with open(args.algfile, 'r+') as algfile:
            for algid, plugin, undo in read_algfile(reverse_file(algfile)):
                if not undo:
                    print(algid, plugin)
                    if not args.all:
                        return
    except IOError:
        warn("Could not open file: {}".format(args.algfile))
        return


def main():
    args = parse_arguments()
    if args.mark is not None:
        mark(args)
    else:
        print_algs(args)


if __name__ == "__main__":
    main()

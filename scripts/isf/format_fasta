#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""Reformat fasta file for ISF.

2013/07/16
Edward Liaw
"""
from __future__ import print_function
from warnings import warn
import argparse
import re
from fungidb_tools import isf
from Bio import SeqIO

RE_DEFAULT = r'(?P<species>\w+)_(?P<type>Chr|SC)(?:(?P<number>\d+)|(?P<letter>[A-Z]+))'


def parse_arguments():
    parser = argparse.ArgumentParser(description=__doc__,
                                     fromfile_prefix_chars='@')
    parser.add_argument('infile',
                        type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help='input file')
    parser.add_argument('outfile',
                        type=argparse.FileType('w'), nargs='?',
                        default=sys.stdout, help='output file')
    # TODO: Handle mitochondrial sequences differently
    parser.add_argument('-m', '--mito',
                        help='output mitochondrial contigs')
    isf.add_rename_args(parser)
    return parser.parse_args()


def main():
    args = parse_arguments()
    renamer = isf.ContigRenamer.from_args(args)

    with args.infile as infile, args.outfile as outfile:
        for record in SeqIO.parse(infile, 'fasta'):
            try:
                record.id = renamer.rename(record.id)
                record.description = ''
                SeqIO.write(record, outfile, 'fasta')
            except isf.NoMatchException:
                warn("SKIPPED: re fails to match component of {}".format(record.id))
                continue
            except AttributeError:
                warn("SKIPPED: re does not match {}".format(record.id))
                continue


if __name__ == "__main__":
    main()
